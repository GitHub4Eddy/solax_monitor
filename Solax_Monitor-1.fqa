{"name":"Solax Monitor","type":"com.fibaro.powerSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_1073"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label1","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_1073"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"tokenId","type":"string","value":"0"},{"name":"inverterSN","type":"string","value":"0"},{"name":"solarM2","type":"string","value":"0"},{"name":"interval","type":"string","value":"300"},{"name":"debugLevel","type":"string","value":"4"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP Solax Monitor\n\n-- This QuickApp monitors your Solax managed Solar Panels\n-- The QuickApp has (child) devices for Solarpower/m², Today production and Total production \n-- The rateType interface of child device today is automatically set to \"production\"\n-- The readings from the child device Today will be shown in the new energy panel \n-- The readings from the child device Total is automatically set to the right Wh unit (Wh, kWh, MWh or GWh) \n\n-- See API documentation on https://www.eu.solaxcloud.com/phoebus/resource/files/userGuide/Solax_API_for_End-user_V1.0.pdf\n-- User can get a specific range of information through the granted tokenID. Please obtain your tokenID on the API page of Solaxcloud for free.\n-- The tokenID can be used to obtain real-time data of your inverter system. The obtain frequency need to be lower than 10 times/min and 10,000 times/day.\n\n\n-- Version 0.1 (17th November 2021)\n-- Tested, ready for release\n\n-- Version 0.2 (15th November 2021)\n-- Changed json response\n\n-- Version 0.1 (13th November 2021)\n-- First (test) version\n\n\n-- Variables (mandatory): \n-- tokenId = token ID of your Solax Inverter, obtain your tokenID on the API page of Solaxcloud for free\n-- inverterSN = Unique identifier (Serial No.) of your Solax inverter\n-- solarM2 = The amount of m2 Solar Panels (use . for decimals) for calculating Solar Power m² (default = 0)\n-- interval = The daily API limitiation is 300 requests (default = 300 seconds (5 minutes), maximum 10 times/min and 10,000 times/day)\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n\n\n-- Example json string (https://www.solaxcloud.com:9443/proxy/api/getRealtimeInfo.do?tokenId={tokenId}&sn={sn}):\n-- {\"exception\":\"Query success!\",\"result\":{\"inverterSN\":\"XBT422Fnnnnnnn\",\"sn\":\"SNWERTYUIO\",\"acpower\":480.0,\"yieldtoday\":876.0,\"yieldtotal\":99860.6,\"feedinpower\":0.0,\"feedinenergy\":0.0,\"consumeenergy\":0.0,\"feedinpowerM2\":0.0,\"soc\":0.0,\"peps1\":0.0,\"peps2\":0.0,\"peps3\":0.0,\"inverterType\":\"4\",\"inverterStatus\":\"102\",\"uploadTime\":\"2021-11-15 10:54:36\",\"batPower\":0.0,\"powerdc1\":26.0,\"powerdc2\":29.0,\"powerdc3\":null,\"powerdc4\":null},\"success\":true}\n\n\n-- No editing of this code is needed \n\n\nclass 'solarpower'(QuickAppChild)\nfunction solarpower:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction solarpower:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.solarPower))\n  self:updateProperty(\"unit\", \"Watt/m²\")\n  self:updateProperty(\"log\", solarM2 ..\" m²\")\nend\n\nclass 'yieldtoday'(QuickAppChild)\nfunction yieldtoday:__init(dev)\n  QuickAppChild.__init(self,dev)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n  self:warning(\"Changed rateType interface of Solax lastDayData child device (\" ..self.id ..\") to production\")\n  end\nend\nfunction yieldtoday:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.yieldtoday))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\nclass 'yieldtotal'(QuickAppChild)\nfunction yieldtotal:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction yieldtotal:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.yieldtotal))\n  self:updateProperty(\"unit\", data.yieldtotalUnit)\n  self:updateProperty(\"log\", \"\")\nend\n\n\nlocal function getChildVariable(child,varName) -- Fetch child class names\n for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp functions\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n    self:debug(text)\n  end\nend\n\n\nfunction QuickApp:solarPower(power, m2) -- Calculate Solar Power per m²\n  self:logging(3,\"Start solarPower\")\n  if m2 > 0 and power > 0 then\n    solarPower = power / m2\n  else\n    solarPower = 0\n  end\n  return solarPower\nend\n\n\nfunction QuickApp:unitCheckWh(measurement) -- Set the measurement and unit to kWh, MWh or GWh\n  self:logging(3,\"Start unitCheckWh\")\n  if measurement > 1000000000 then\n    return string.format(\"%.3f\",measurement/1000000000),\"GWh\"\n  elseif measurement > 1000000 then\n    return string.format(\"%.3f\",measurement/1000000),\"MWh\"\n  elseif measurement > 1000 then\n    return string.format(\"%.3f\",measurement/1000),\"kWh\"\n  else\n    return string.format(\"%.0f\",measurement),\"Wh\"\n  end\nend\n\n\nfunction QuickApp:updateProperties() -- Update the properties\n  self:logging(3,\"updateProperties\")\n  self:updateProperty(\"value\", tonumber(data.acpower))\n  self:updateProperty(\"power\", tonumber(data.acpower))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", data.uploadTime)\nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels\n  self:logging(3,\"updateLabels\")\n  local labelText = \"\"\n  labelText = labelText ..\"Current power: \" ..data.acpower ..\" Watt\" ..\"\\n\\n\"\n  labelText = labelText ..\"Solar power: \" ..data.solarPower ..\" Watt/m² (\" ..solarM2 ..\" m²)\" ..\"\\n\"\n  labelText = labelText ..\"Lastday: \" ..data.yieldtoday ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Total: \" ..data.yieldtotal ..\" \" ..data.yieldtotalUnit ..\"\\n\\n\"\n  labelText = labelText ..\"Last update: \" ..data.uploadTime ..\"\\n\" \n  self:updateView(\"label1\", \"text\", labelText)\n  self:logging(2,labelText)\nend\n\n\nfunction QuickApp:getValues() -- Get the values from json file \n  self:logging(3,\"getValues\")\n  data.acpower = string.format(\"%.0f\", jsonTable.result.acpower)\n  data.solarPower = string.format(\"%.3f\",self:solarPower(tonumber(data.acpower), tonumber(solarM2)))\n  data.yieldtoday = string.format(\"%.3f\",jsonTable.result.yieldtoday/1000)\n  data.yieldtotal = string.format(\"%.3f\",jsonTable.result.yieldtotal)\n  data.yieldtotal, data.yieldtotalUnit = self:unitCheckWh(tonumber(data.yieldtotal)) -- Set measurement and unit to kWh, MWh or GWh\n  data.inverterType = jsonTable.result.inverterType\n  data.uploadTime = jsonTable.result.uploadTime\n  local pattern = \"(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)\"\n  local runyear, runmonth, runday, runhour, runminute, runseconds = data.uploadTime:match(pattern)\n  local convertedTimestamp = os.time({year = runyear, month = runmonth, day = runday, hour = runhour, min = runminute, sec = runseconds})\n  data.uploadTime = os.date(\"%d-%m-%Y %H:%M\", convertedTimestamp)\nend\n\n\nfunction QuickApp:simData() -- Simulate Solax Monitor\n  self:logging(3,\"simData\")\n  apiResult = '{\"exception\":\"Query success!\",\"result\":{\"inverterSN\":\"XBT422Fnnnnnnn\",\"sn\":\"SNWERTYUIO\",\"acpower\":480.0,\"yieldtoday\":876.0,\"yieldtotal\":99860.6,\"feedinpower\":0.0,\"feedinenergy\":0.0,\"consumeenergy\":0.0,\"feedinpowerM2\":0.0,\"soc\":0.0,\"peps1\":0.0,\"peps2\":0.0,\"peps3\":0.0,\"inverterType\":\"4\",\"inverterStatus\":\"102\",\"uploadTime\":\"2021-11-15 10:54:36\",\"batPower\":0.0,\"powerdc1\":26.0,\"powerdc2\":29.0,\"powerdc3\":null,\"powerdc4\":null},\"success\":true}'\n \n  jsonTable = json.decode(apiResult) \n  \n  self:getValues()\n  self:updateLabels()\n  self:updateProperties()\n\n  for id,child in pairs(self.childDevices) do \n    child:updateValue(data,userID) \n  end\n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:simData()\n  end)\nend\n\n\nfunction QuickApp:getData() -- Get the data from the API\n  self:logging(3,\"getData\")\n  self:logging(2,\"URL: \" ..url)\n  http:request(url, {\n    options={headers = {Accept = \"application/json\"},method = 'GET'},   \n      success = function(response)\n        self:logging(3,\"response status: \" ..response.status)\n        self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n        self:logging(2,\"Response data: \" ..response.data)\n\n        if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 then -- Check for empty result\n          self:warning(\"Temporarily no production data from Solax Monitor\")\n          self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n          fibaro.setTimeout(interval*1000, function() \n            self:getdata()\n          end)\n        end\n\n        jsonTable = json.decode(response.data) \n\n        self:getValues()\n        self:updateLabels()\n        self:updateProperties()\n\n        for id,child in pairs(self.childDevices) do \n          child:updateValue(data,userID) \n        end\n\n      end,\n      error = function(error)\n        self:error(\"error: \" ..json.encode(error))\n        self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n      end\n    }) \n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:getData()\n  end)\nend\n\n\nfunction QuickApp:createVariables() -- Create all Variables \n  jsonTable = {}\n  data = {}\n  data.acpower = \"0\"\n  data.solarPower = \"0\" \n  data.yieldtoday = \"0\"\n  data.yieldtotal = \"0\"\n  data.yieldtotalUnit= \"Wh\"\n  data.uploadTime = \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all Quickapp Variables or create them\n  local tokenId = self:getVariable(\"tokenId\")\n  local inverterSN = self:getVariable(\"inverterSN\")\n  solarM2 = tonumber(self:getVariable(\"solarM2\"))\n  interval = tonumber(self:getVariable(\"interval\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n\n  -- Check existence of the mandatory variables, if not, create them with default values\n  if tokenId == \"\" or tokenId == nil then\n    tokenId = \"0\" -- This siteID is just an example, it is not working \n    self:setVariable(\"tokenId\",tokenId)\n    self:trace(\"Added QuickApp variable tokenId\")\n  end\n if inverterSN == \"\" or inverterSN == nil then\n    inverterSN = \"0\" -- This inverter ID is just an example, it is not working\n    self:setVariable(\"inverterSN\",inverterSN)\n    self:trace(\"Added QuickApp variable inverterSN\")\n  end \n  if solarM2 == \"\" or solarM2 == nil then \n    solarM2 = \"0\" -- Default Solar/m²\n    self:setVariable(\"solarM2\",solarM2)\n    self:trace(\"Added QuickApp variable solarM2\")\n  end \n  if interval == \"\" or interval == nil then\n    interval = \"300\" -- Default interval\n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end\n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default debug level\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if tokenId == nil or tokenId == \"\"  or tokenId == \"0\" then -- Check mandatory tokenId   \n    self:error(\"tokenId is empty! Please obtain your tokenID on the API page of Solaxcloud for free and copy the tokenId to the quickapp variable\")\n    self:warning(\"No tokenId: Switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty tokenId \n  end\n  if inverterSN == nil or inverterSN == \"\"  or inverterSN == \"0\" then -- Check mandatory inverterSN \n    self:error(\"inverterSN is empty! Get your inverterSN from your inverter and copy the inverterSN to the quickapp variable\")\n    self:warning(\"No inverterSN: Switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty inverterSN\n  end\n  \n  url = \"https://www.solaxcloud.com:9443/proxy/api/getRealtimeInfo.do?tokenId=\" ..tokenId ..\"&sn=\" ..inverterSN\nend\n\n\nfunction QuickApp:setupChildDevices() -- Pick up all Child Devices\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {}\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n      local initChildData = { \n        {className=\"solarpower\", name=\"Solar Power\", type=\"com.fibaro.powerSensor\", value=0},\n        {className=\"yieldtoday\", name=\"Today\", type=\"com.fibaro.energyMeter\", value=0},\n        {className=\"yieldtotal\", name=\"Total\", type=\"com.fibaro.multilevelSensor\", value=0},\n      }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialInterfaces = {},\n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n\n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"onInit\") \n  \n  self:setupChildDevices()\n  self:getQuickAppVariables() \n  self:createVariables()\n  \n  http = net.HTTPClient({timeout=5*1000})\n  \n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else\n    self:getData() -- Get data from Solax Monitor\n  end\nend\n\n-- EOF  "}]}